
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
orbs:
  docker: circleci/docker@1.5.0
  aws-cli: circleci/aws-cli@1.3.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

version: 2.1

jobs:
  docker-steps:
    docker:
      - image: docker:17.05.0-ce-git
      #executor: docker/docker
    steps:
      - checkout
      - run:
         name: docker
         command:
            cd project-ml-microservice-kubernetes
            ./upload_docker.sh
            ./run_docker.sh
            service docker status
            docker stack deploy --compose-file compose.yml mystack
      - run:
         name: kubernetes
         command: |
           cd project-ml-microservice-kubernetes
           #service docker status
           #docker stack deploy --compose-file compose.yml mystack
            

  build:
       docker:
        - image: python:3.7.3-stretch
       working_directory: ~/project-ml-microservice-kubernetes
       steps:
         - checkout
      # Download and cache dependencies
         - run:
            command:  cd ./project-ml-microservice-kubernetes
         - restore_cache:
            keys:
             - v1-dependencies-{{ checksum "./project-ml-microservice-kubernetes/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
             - v1-dependencies-

         - run:
             name: install dependencies
             command: |
              python3 -m venv ~/.devops
              source ~/.devops/bin/activate
              cd ./project-ml-microservice-kubernetes
              ls -l
              make install
            # Install hadolint
                       
         - save_cache:
             paths:
             - ./venv
             key: v1-dependencies-{{ checksum "./project-ml-microservice-kubernetes/requirements.txt" }}

         - run:
            name: run lint
            command: |
             cd ./project-ml-microservice-kubernetes/
             pip install --upgrade pip && python3 -m pip install pylint --no-cache-dir
             pip install -r requirements.txt
             make lint

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

workflows:
  deployment:
    jobs:
     # - aws-eks/create-cluster:
         # cluster-name: my-eks-demo
      #- test-cluster:
        #  cluster-name: my-eks-demo
         # requires:
          #  - aws-eks/create-cluster
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
         # requires:
           # - test-cluster








#workflows:
  #default:
    #jobs:
      #- docker-steps
      #- build
      #- kubernetes 
        

